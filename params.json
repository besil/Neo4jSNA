{"name":"Neo4jsna","tagline":"","body":"# Neo4jSNA\r\n\r\nNeo4jSNA is a Java based collection of useful algorithms for Social Network analysis, based on Neo4j, the graph database.\r\nActually, all algorithms are implemented using the Neo4j Embedded mode.\r\n\r\nThe project uses Maven for dependency management. The other used library is the <a href=\"http://fastutil.di.unimi.it/\" target=\"_blank\">fastutil project</a>:\r\nif you don't know it yet, you should definitely check it.\r\n\r\nThe implemented algorithms are, for now:\r\n\r\n- [x] <a href=\"http://en.wikipedia.org/wiki/PageRank\" target=\"_blank\">PageRank</a>:\r\n- [x] Connected Components\r\n- [x] Triangle count\r\n- [ ] <a href=\"http://arxiv.org/pdf/0906.0612v2.pdf\" target=\"_blank\">Community Detection</a>\r\n\t- [x] <a href=\"http://arxiv.org/pdf/0709.2938v1.pdf\" target=\"_blank\">Label Propagation</a>\r\n\t- [x] <a href=\"http://arxiv.org/pdf/0803.0476v2.pdf\" target=\"_blank\">Louvain Method</a>\r\n\t- [ ] <a href=\"http://www.michelecoscia.com/wp-content/uploads/2012/08/cosciakdd12.pdf\" target=\"_blank\">Demon</a>\r\n\t- [x] <a href=\"http://arxiv.org/pdf/physics/0602124.pdf\" target=\"_blank\">Modularity</a>\r\n\r\n\r\n# QuickStart\r\n\r\n```Java\r\nString path = \"data/tmp/cineasts\";\r\n\r\n// Open a database instance\r\nGraphDatabaseService g = new GraphDatabaseFactory().newEmbeddedDatabase(path);\r\n\r\n// Declare the GraphAlgoEngine on the database instance\r\nGraphAlgoEngine engine = new GraphAlgoEngine(g);\r\n\r\nLabelPropagation lp = new LabelPropagation();\r\n// Starts the algorithm on the given graph g\r\nengine.execute(lp);\r\nLong2LongMap communityMap = lp.getResult();\r\nlong totCommunities = new LongOpenHashSet( communityMap.values() ).size();\r\nSystem.out.println(\"There are \"+totCommunities+\" communities according to Label Propagation\");\r\n\r\nDirectedModularity modularity = new DirectedModularity(g);\r\nengine.execute(modularity);\r\nSystem.out.println(\"The directed modularity of this network is \"+modularity.getResult());\r\n\r\nUndirectedModularity umodularity = new UndirectedModularity(g);\r\nengine.execute(umodularity);\r\nSystem.out.println(\"The undirected modularity of this network is \"+umodularity.getResult());\r\n\r\nTriangleCount tc = new TriangleCount();\r\nengine.execute(tc);\r\nLong2LongMap triangleCount = tc.getResult();\r\nOptional<Long> totalTriangles = triangleCount.values().stream().reduce( (x, y) -> x + y );\r\nSystem.out.println(\"There are \"+totalTriangles.get()+\" triangles\");\r\n\r\nPageRank pr = new PageRank(g);\r\nengine.execute(pr);\r\nLong2DoubleMap ranks = pr.getResult();\r\nOptional<Double> res = ranks.values().parallelStream().reduce( (x, y) -> x + y );\r\nSystem.out.println(\"Check PageRank sum is 1.0: \"+ res.get());\r\n\r\nConnectedComponents cc = new ConnectedComponents();\r\nengine.execute(cc);\r\nLong2LongMap components = cc.getResult();\r\nint totalComponents = new LongOpenHashSet( components.values() ).size();\r\nSystem.out.println(\"There are \"+ totalComponents+ \" different connected components\");\r\n\r\nStronglyConnectedComponents scc = new StronglyConnectedComponents();\r\nengine.execute(cc);\r\ncomponents = scc.getResult();\r\ntotalComponents = new LongOpenHashSet( components.values() ).size();\r\nSystem.out.println(\"There are \"+ totalComponents+ \" different strongly connected components\");\r\n\r\n// Don't forget to shutdown the database\r\ng.shutdown();\r\n```\r\n","google":"UA-68394103-1","note":"Don't delete this file! It's used internally to help with page regeneration."}